/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package farmasalud.partederecepcion;

import farmasalud.ConsultasGenerales;
import farmasalud.atributosclases.ACabeceraOrdenDeCompra;
import farmasalud.atributosclases.ACabeceraPedidos;
import farmasalud.atributosclases.ADetalleDetalleDeCotizacion;
import farmasalud.atributosclases.ADetalleLote;
import farmasalud.atributosclases.ADetalleOferta;
import farmasalud.atributosclases.ADetalleOrdenDeCompra;
import farmasalud.atributosclases.ADetalleParteDeRecepcion;
import farmasalud.atributosclases.ADetallePedidos;
import farmasalud.atributosclases.AParteDeRecepcion;
import farmasalud.atributosclases.AProveedor;
import farmasalud.atributosclases.AUsuario;
import farmasalud.atributosclases.UsuarioActivo;
import farmasalud.jtable.jtDetalleRecepcion;
import farmasalud.operaciones.OManager;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;

/**
 *
 * @author Francisco Palacio
 */
public class FParteDeRecepcion extends javax.swing.JFrame {

    private OManager manager = new OManager();
    private UsuarioActivo usuarioActivo;
    private jtDetalleRecepcion tablaDetalleRecepcion;
    private ConsultasGenerales consultas;
    private boolean bCantidadAceptada, bCantidadRechazada;
    private String idDetalleParteRecepcion, nombreProducto, cantidadPedida, cantidadRecibida;
    private int rowSeleccionado, total, cantidadDISPONIBLE;
    private ADetallePedidos insertar;
    private ADetalleLote registrarDetalle;
    private int cantidadFilas = 0;
    private int completo;
    final Integer idParteRecepcion;

    /**
     * Creates new form FParteDeRecepcion
     *
     * @param idParteRecepcion
     */
    public FParteDeRecepcion(int idParteRecepcion) {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        manager = new OManager();
        cargarTabla(idParteRecepcion);
        llenarCabecera(idParteRecepcion);
        this.idParteRecepcion = idParteRecepcion;
        deshabilitarBotones();
        consultas = ConsultasGenerales.obtenerInstacia();
        consultas.habilitarBotonAbrir(tableDetalles, btnVerificarProducto);
        usuarioActivo = UsuarioActivo.getInstancia();
    }

    private void deshabilitarBotones() {
        btnVerificarProducto.setEnabled(false);
        btnAceptar.setEnabled(false);
        txtCantidadAceptada.setEnabled(false);
        txtCantidadRechazada.setEnabled(false);
        btnRegistrar.setEnabled(false);
    }

    private void llenarCabecera(int idParteRecepcion) {
        manager.getParteDeRecepcion().obtenerUno(idParteRecepcion).forEach((AParteDeRecepcion a) -> {
            txtIdParteRecepcion.setText(String.valueOf(a.getIdParteRecepcion()));
            txtNumeroRemito.setText(String.valueOf(a.getNumeroRemito()));
            txtFechaRecepcion.setText(String.valueOf(a.getFechaRecepcion()));
            txtNroOrdenDeCompra.setText(String.valueOf(a.getNumeroOc()));
            manager.getProveedor().obtenerUno(a.getIdProveedor()).forEach((AProveedor ap) -> {
                txtProveedor.setText(ap.getNombre());
            });
            txtObeservacion.setText(a.getObservaciones());
        });
    }

    private void cargarTabla(int idParteRecepcion) {
        tablaDetalleRecepcion = new jtDetalleRecepcion(manager);
        tablaDetalleRecepcion.updateModel(idParteRecepcion);
        tableDetalles.getTableHeader().setReorderingAllowed(false);
        tableDetalles.setModel(tablaDetalleRecepcion);
    }

    private FParteDeRecepcion() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtIdParteRecepcion = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNroOrdenDeCompra = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNumeroRemito = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtProveedor = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtFechaRecepcion = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObeservacion = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDetalles = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtCantidadRechazada = new javax.swing.JTextField();
        txtCantidadAceptada = new javax.swing.JTextField();
        txtCantidadOrdenDeCompra = new javax.swing.JLabel();
        txtProducto = new javax.swing.JLabel();
        btnAceptar = new javax.swing.JButton();
        txtCantidadRecibida = new javax.swing.JLabel();
        btnVerificarProducto = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Cabecera Parte De Recepcion"), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        jLabel1.setText("Id Parte Recepcion:");

        txtIdParteRecepcion.setText("jLabel2");

        jLabel3.setText("Numero orden de compra:");

        txtNroOrdenDeCompra.setText("jLabel4");

        jLabel5.setText("Remito nro:");

        txtNumeroRemito.setText("jLabel6");

        jLabel7.setText("Proveedor:");

        txtProveedor.setText("jLabel8");

        jLabel9.setText("Fecha Recepci√≥n:");

        txtFechaRecepcion.setText("jLabel10");

        jLabel11.setText("Observaciones:");

        txtObeservacion.setColumns(20);
        txtObeservacion.setRows(5);
        jScrollPane1.setViewportView(txtObeservacion);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtFechaRecepcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel11))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtIdParteRecepcion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtNumeroRemito)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel7)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNroOrdenDeCompra)
                            .addComponent(txtProveedor)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtIdParteRecepcion)
                    .addComponent(jLabel3)
                    .addComponent(txtNroOrdenDeCompra))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtNumeroRemito)
                    .addComponent(jLabel7)
                    .addComponent(txtProveedor))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtFechaRecepcion)
                            .addComponent(jLabel11))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Detalles Parte De Recepcion"));

        tableDetalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableDetalles.setRowHeight(25);
        tableDetalles.setRowMargin(5);
        tableDetalles.setSelectionBackground(new java.awt.Color(0, 153, 51));
        jScrollPane2.setViewportView(tableDetalles);

        jPanel4.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createTitledBorder("Verificar Productos"), javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(51, 0, 204), null)));

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setText("Cantidad Aceptada:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel13.setText("Cantidad Rechazada:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel14.setText("Producto:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel15.setText("Cantidad Recibida:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel16.setText("Cantidad orden de compra:");

        txtCantidadRechazada.setText("0");
        txtCantidadRechazada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadRechazadaKeyTyped(evt);
            }
        });

        txtCantidadAceptada.setText("0");
        txtCantidadAceptada.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCantidadAceptadaKeyTyped(evt);
            }
        });

        txtCantidadOrdenDeCompra.setText("jLabel17");

        txtProducto.setText("jLabel18");

        btnAceptar.setText("Verficar");
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        txtCantidadRecibida.setText("jLabel17");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtCantidadRechazada, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 143, Short.MAX_VALUE)
                        .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCantidadAceptada, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCantidadRecibida)
                            .addComponent(txtCantidadOrdenDeCompra)
                            .addComponent(txtProducto))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(txtProducto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txtCantidadOrdenDeCompra))
                .addGap(20, 20, 20)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txtCantidadRecibida))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtCantidadAceptada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtCantidadRechazada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btnVerificarProducto.setText("Seleccionar Producto");
        btnVerificarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerificarProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(btnVerificarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnVerificarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        btnRegistrar.setText("Registrar Parte De Recepcion");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(391, 391, 391)
                        .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegistrar, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnVerificarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerificarProductoActionPerformed
        rowSeleccionado = tableDetalles.getSelectedRow();
        idDetalleParteRecepcion = tableDetalles.getValueAt(rowSeleccionado, 0).toString();
        nombreProducto = tableDetalles.getValueAt(rowSeleccionado, 5).toString();
        cantidadPedida = tableDetalles.getValueAt(rowSeleccionado, 1).toString();
        cantidadRecibida = tableDetalles.getValueAt(rowSeleccionado, 2).toString();
        txtProducto.setText(nombreProducto);
        txtCantidadOrdenDeCompra.setText(cantidadPedida);
        txtCantidadRecibida.setText(cantidadRecibida);
        txtCantidadRechazada.setEnabled(true);
        txtCantidadAceptada.setEnabled(true);
        txtCantidadAceptada.requestFocus();
    }//GEN-LAST:event_btnVerificarProductoActionPerformed

    public List<ADetallePedidos> obtenerDetallePedidos(int detalleParteRecepcion) {
        List<ADetallePedidos> arrayListDetallePedidos = new ArrayList();
        //obtener detalles parte recepcion
        manager.getDetalleParteDeRecepcion().obtenerUno(detalleParteRecepcion).forEach((ADetalleParteDeRecepcion adpr) -> {
            //obtener detalle orden de compra
            manager.getDetalleOrdenDeComrpa().obtenerUno(adpr.getDetalleOrdenDeCompra()).forEach((ADetalleOrdenDeCompra adoc) -> {
                //obtener detalle oferta
                manager.getDetalleOferta().obtenerUno(adoc.getIdDetalleOferta()).forEach((ADetalleOferta adof) -> {
                    //obteneer detalle detalle cotizacion
                    manager.getDetalleDetalle().obtenerUno(adof.getIdDetalleCotizacion()).forEach((ADetalleDetalleDeCotizacion addc) -> {
                        manager.getDetallePedidos().obtenerUno(addc.getIdDetallePedido()).forEach((ADetallePedidos adp) -> {
                            insertar = new ADetallePedidos();
                            insertar.setIdDetalle(adp.getIdDetalle());
                            insertar.setNumeroPedidos(adp.getNumeroPedidos());
                            insertar.setCantidad(adp.getCantidad());
                            insertar.setCantidadEnvioInterno(adp.getCantidad());
                            insertar.setIdProducto(adp.getIdProducto());
                            arrayListDetallePedidos.add(insertar);
                        });
                    });
                });
            });
        });
        return arrayListDetallePedidos;
    }

    public void registrarDetalleLote() {
        int filasTotales = tablaDetalleRecepcion.getRowCount();
        //obtener datos de la tabla por cada fila
        for (int i = 0; filasTotales > i; i++) {
            ADetalleParteDeRecepcion datos = tablaDetalleRecepcion.obtenerDetalles(i);
            if (tablaDetalleRecepcion.getValueAt(i, 7).toString().equals("Si")) {
                cantidadFilas++;
                //obtener lote ingresado
                String lote = tablaDetalleRecepcion.getValueAt(i, 6).toString();
                //obtener cantidad disponible para registrar
                cantidadDISPONIBLE = datos.getCantidadAceptada();
               
                //obtener detalle pedidos
                obtenerDetallePedidos(datos.getIdDetalleParteRecepcion()).forEach((ADetallePedidos adp) -> {
                    //verificar cantidad disponible y que son el mismo 
                     System.out.println(adp.getIdDetalle()+" "+cantidadDISPONIBLE+ " "+ adp.getCantidad());
                     //
                    if (/*cantidadDISPONIBLE >= adp.getCantidad() && */adp.getIdProducto() == datos.getIdProducto()) {
                        registrarDetalleLote(adp, lote, cantidadDISPONIBLE);
                        
                   }// else {
                       // System.out.println("cantidad faltante");
                      //  System.out.println(" registrar" + cantidadDISPONIBLE);
                     //   registrarDetalleLote(adp, lote, cantidadDISPONIBLE);
                  //  }
                });
            } else {
                System.out.println("no verificado" + datos.getIdDetalleParteRecepcion());
            }

        }

    }

    private void registrarDetalleLote(ADetallePedidos adp, String lote, int cantidadDISPONIBLE) {
        //obtener si en que inventario esta para definir si realiza envio interno o no
        manager.getCabeceraPedidos().obtenerUno(adp.getNumeroPedidos()).forEach((ACabeceraPedidos ac) -> {
            manager.getUsuario().obtenerUsuarioXId(ac.getId_usuario()).forEach((AUsuario au) -> {
                if (au.getIdSucursal().equals("FARMACIA 1")) {
                    insertarDetalle(adp, lote, cantidadDISPONIBLE, "IC");
                } else {
                    insertarDetalle(adp, lote, cantidadDISPONIBLE, "EN");

                }

            });
        });

    }

    private void insertarDetalle(ADetallePedidos adp, String lote, int cantidadDISPONIBLE, String estado) {

        int cantidad = verficarLoteCantidadXDetallePedido(adp);
        System.out.println(cantidad);
        System.out.println(adp.getIdDetalle());
        System.out.println(lote);
        System.out.println(cantidadDISPONIBLE);
          registrarDetalle = new ADetalleLote();
          //si hay cantidad faltante y hay cantidad dispoible registrar nuevo detalle
        if (cantidad > 0 && cantidadDISPONIBLE > 0) {
            registrarDetalle.setIdDetallePedido(adp.getIdDetalle());
            registrarDetalle.setIdLote(lote);
            registrarDetalle.setEstado(estado);
            //controlar si la cantidad dispible es mayor a la cantidad faltante
            if (cantidadDISPONIBLE > cantidad) {
                registrarDetalle.setStock(cantidad);
                this.cantidadDISPONIBLE = this.cantidadDISPONIBLE- cantidad;
            } else {
                registrarDetalle.setStock(cantidadDISPONIBLE);
                this.cantidadDISPONIBLE = this.cantidadDISPONIBLE-cantidadDISPONIBLE;

            }
          manager.getDetalleLote().insertar(registrarDetalle);
        }else{
            System.out.println("no registrar");
        }
          

    }

    private void txtCantidadAceptadaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadAceptadaKeyTyped
        consultas.evitarIngresoCaracteres(evt.getKeyChar(), evt);
        btnAceptar.setEnabled(true);
    }//GEN-LAST:event_txtCantidadAceptadaKeyTyped

    private void txtCantidadRechazadaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCantidadRechazadaKeyTyped
        consultas.evitarIngresoCaracteres(evt.getKeyChar(), evt);
        btnAceptar.setEnabled(true);
    }//GEN-LAST:event_txtCantidadRechazadaKeyTyped

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed
        if (verficarCantidadesIngresadas()) {
            limpiarCampos();
            deshabilitarBotones();
            tableDetalles.clearSelection();
            btnRegistrar.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, "verfica las cantidades ingresadas");
        }

    }//GEN-LAST:event_btnAceptarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
     //actualizar detalle parte de recepcion 
       actualizarDetalleParteRecepcion();
       registrarDetalleLote();
        System.out.println(cantidadFilas);
        //actualizar cabecera parte de recepcion
        if (cantidadFilas == tableDetalles.getRowCount()) {
           manager.getParteDeRecepcion().acutalizarEstado("VE", Integer.valueOf(txtIdParteRecepcion.getText()));
        }
        verficarDetalleOrdenCompra();
        this.dispose();
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private boolean verficarCantidadesIngresadas() throws NumberFormatException {
        boolean cantidad;

        int cantidadRecibidaa = Integer.valueOf(cantidadRecibida);
        int cantidadAceptadaa = Integer.valueOf(txtCantidadAceptada.getText());
        int cantidadRechazada = Integer.valueOf(txtCantidadRechazada.getText());
        int diferencia = cantidadRecibidaa - (cantidadAceptadaa + cantidadRechazada);

        if (cantidadAceptadaa <= cantidadRecibidaa
                && cantidadRechazada <= cantidadRecibidaa
                && diferencia == 0) {
            tablaDetalleRecepcion.setValueAt("Si", rowSeleccionado, 7);
            tablaDetalleRecepcion.setValueAt(cantidadAceptadaa, rowSeleccionado, 3);
            tablaDetalleRecepcion.setValueAt(cantidadRechazada, rowSeleccionado, 4);
            System.out.println(rowSeleccionado);
            tableDetalles.updateUI();
            return cantidad = true;

        } else {
            return cantidad = false;
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FParteDeRecepcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FParteDeRecepcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FParteDeRecepcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FParteDeRecepcion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new FParteDeRecepcion().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton btnVerificarProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableDetalles;
    private javax.swing.JTextField txtCantidadAceptada;
    private javax.swing.JLabel txtCantidadOrdenDeCompra;
    private javax.swing.JTextField txtCantidadRechazada;
    private javax.swing.JLabel txtCantidadRecibida;
    private javax.swing.JLabel txtFechaRecepcion;
    private javax.swing.JLabel txtIdParteRecepcion;
    private javax.swing.JLabel txtNroOrdenDeCompra;
    private javax.swing.JLabel txtNumeroRemito;
    private javax.swing.JTextArea txtObeservacion;
    private javax.swing.JLabel txtProducto;
    private javax.swing.JLabel txtProveedor;
    // End of variables declaration//GEN-END:variables

    private void actualizarDetalleParteRecepcion() {
        ArrayList<ADetalleParteDeRecepcion> actualizarDetalles = new ArrayList();
        int filasTotales = tablaDetalleRecepcion.getRowCount();
        for (int i = 0; filasTotales > i; i++) {
            ADetalleParteDeRecepcion datos = tablaDetalleRecepcion.obtenerDetalles(i);
            System.out.println(datos.getIdDetalleParteRecepcion());
            datos.setIdUsuarioVerificacion(usuarioActivo.getIdUsuario());
            datos.setiDPartederecepcion(Integer.valueOf(txtIdParteRecepcion.getText()));
            actualizarDetalles.add(datos);
        }
        manager.getDetalleParteDeRecepcion().actualizar(actualizarDetalles);

    }

    private void limpiarCampos() {
        txtProducto.setText("");
        txtCantidadOrdenDeCompra.setText("");
        txtCantidadRecibida.setText("");
        txtCantidadAceptada.setText("0");
        txtCantidadRechazada.setText("0");

    }

    private ArrayList<Integer>  obtenrIDOrdenDeCompraAModificar() {
        ArrayList<Integer> arrayListIdParteRecepcion;
        arrayListIdParteRecepcion = new ArrayList<>();
        manager.getDetalleParteDeRecepcion().obtenerTodos().stream().collect(Collectors.groupingBy(a -> a.getDetalleOrdenDeCompra(),
                Collectors.summingInt(b -> b.getCantidadAceptada()))).forEach((Integer id, Integer cantidad) -> {
            manager.getDetalleOrdenDeComrpa().obtenerUno(id).stream().filter(a -> a.getIdDetalleOC() == id)
                     .forEach((ADetalleOrdenDeCompra ad) -> {                   
                        if (ad.getCantidad() == cantidad) {
                            arrayListIdParteRecepcion.add(ad.getNumeroOC());   
                        } else {
                            System.out.println("no cambiar ni mierda");
                        }
                    });

        });
        return arrayListIdParteRecepcion;
        
    }

    private void verficarDetalleOrdenCompra(){
        manager.getDetalleOrdenDeComrpa().obtenerTodos().stream().collect(Collectors.groupingBy(a -> a.getNumeroOC(),
                Collectors.counting())).forEach((Integer a,Long e)->{
                obtenrIDOrdenDeCompraAModificar().stream().collect(Collectors.groupingBy(d->d,Collectors.counting()))
                        .forEach((Integer as,Long ds)->{
                    if(Objects.equals(as, a) && Objects.equals(ds, e)){
                        System.out.println("cambiar estado");
                        System.out.println(as +""+ ds);
                       System.out.println(a+" "+e);
                       manager.getCabeceraOrdenDeCompra().actulizarEestado(as,"CE");
                    }else{
                        System.out.println("noo cambiar aun");
                        System.out.println(as +""+ ds);
                          System.out.println(a+" "+e);
                    }
                    
                });
       
        });
      
        
        
    }
    
    
    
    
    private int verficarLoteCantidadXDetallePedido(ADetallePedidos adp) {
        completo = 0;
        System.out.println("detalle a verificar" +adp.getIdDetalle());
        //controlar si hay detalles registrados
         if (!manager.getDetalleLote().obtenerIDetalePedido(adp.getIdDetalle()).isEmpty()) {
             //filtrar detalles de lote iguales al detalle de pedido
                manager.getDetalleLote().obtenerTodos().stream()
                        .collect(Collectors.groupingBy(a -> a.getIdDetallePedido() == adp.getIdDetalle(), Collectors.summingInt(b -> b.getStock())))
                        .forEach((Boolean idDetallePedido, Integer cantidadEnInventario) -> {
                            //obtener cantidad faltante
                         int cantidadFaltante = adp.getCantidad() - cantidadEnInventario;
                            completo = cantidadFaltante;
                            System.out.println(completo);
                          
                           

                        });
            } else {
             // si no hay detalle devolver toda la cantidad que falta
                completo = adp.getCantidad();
                        }

        
        return completo;
    }
}
